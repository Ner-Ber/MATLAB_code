function [DataStruct] = phedi_createStructureWAdd(experNum, eventNum,varargin)


%
% Insert the optional parameters as follows:
%       'parameterName1',parameterVal1,'parameterName2',parameterVal2,...
%
%PARAMETERS = DAFAULTS:
%     'experNum',             1;...
%     'eventNum',             3;...
%     'lineNum',              'all';...
%     'BlurROT',              1;...
%     'UsrRes',               nan;...
%     'numOOM',               3;...
%     'slopePenalty',         0;...
%     'expandLowBound',       -1;...
%     'expandHighBound',      0;...
%     'followMethod',         'RMS_minimization';...
%     'phediRelative2first',  0;...
%     'coarseShift',          0;...
%     'preRowsTime',          3e-3;...
%     'postRowsTime',         3e-3;...
%     'prePhediTime',         1.5e-4;...
%     'postPhediTime',        3e-4;...
%     'smooth4Phedi',         0.001;...
%     'PhediSafetyDist',      30;...
%     'QuickAndDirty',        0;...
%     'scratchWidth',         100*1e-6;...
%     'scratchRegionMeters',  [0.07 0.09];...
%     'defPhotoLoc',          0.08;...
%     'Cr',                   1255;...
%     'CohsvModl_h',          1e-7;...
%     'skipPrecursor',        1;...
%     'frontFallDetermn',     2;...
%     'signalSmooth4PhediTrack',   1        # added in 22/5/2020 for smoothing noise when analysing few rows (not all 8)



%% define defaults:

defCell = {...
    'experNum',             1;...
    'eventNum',             3;...
    'lineNum',              'all';...
    'BlurROT',              1;...
    'UsrRes',               nan;...
    'numOOM',               3;...
    'slopePenalty',         0;...
    'expandLowBound',       -1;...
    'expandHighBound',      0;...
    'followMethod',         'RMS_minimization';...
    'phediRelative2first',  0;...
    'coarseShift',          0;...
    'preRowsTime',          3e-3;...
    'postRowsTime',         3e-3;...
    'prePhediTime',         1.5e-4;...
    'postPhediTime',        3e-4;...
    'smooth4Phedi',         0.001;...
    'PhediSafetyDist',      30;...
    'QuickAndDirty',        0;...
    'scratchWidth',         100*1e-6;...
    'scratchRegionMeters',  [0.07 0.09];...
    'defPhotoLoc',          0.08;...
    'Cr',                   1255;...
    'CohsvModl_h',          1e-7;...
    'skipPrecursor',        1;...
    'frontFallDetermn',     2;...
    'signalSmooth4PhediTrack',   1
    };
Param = setDefaults4function_byName(defCell,varargin);


try
    %% create images' data structs:
    DataStructWCameras = Movie_createDataStructOfBigSmallPics(experNum, eventNum,Param);
    
    %% follow phedis:
    DataStructWPhedis = Movie_phedi_from_folder_2_data_parameterStruct(DataStructWCameras);
    
    %% data from sgs
    rupture_kind = 'slow';
    DataStructWsg = sg_getDataAndFixShearSens(DataStructWPhedis,rupture_kind);
    
    %%
    if ~(phantom_isPrecursor(DataStructWsg.BigPicRotStruct) && DataStructWsg.Param.skipPrecursor)
        %--- add location vectors:
        DataStructWLocation = phedi_add_phediLocationVectors(DataStructWsg);
        %--- add velocity vectors:
        DataStructWVelocity = phedi_add_velocity_to_struct(DataStructWLocation);
        %--- smooth functions measured:
        DataStructWSmooth = phedi_addSmoothedFunctions2Struct(DataStructWVelocity);
        %-- ad smoothed by Savitzky Golay:
        DataStructSgSmooth = phedi_smoothWsgolay(DataStructWSmooth);
        %--- add:
        DataStructWSol = phedi_addLEFMandCohesive2Struct(DataStructSgSmooth,Param);
        
    else
        %--- if isPrecursor=1 operate only on sg:
        DataStructWSol = sg_updateSpaceVectors(DataStructWsg);
        
    end
    
    %% final struct
    DataStruct = DataStructWSol;
    
catch
    %% if it fails
    %--- save the workspace in case of error
    w = whos;
    for a = 1:length(w)
        theWorkspace.(w(a).name) = eval(w(a).name);
    end
    DataStruct = struct;
    DataStruct.theWorkspace = theWorkspace;
    putvar('DataStruct');
    
end

end